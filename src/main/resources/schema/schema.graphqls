type Order {
    id: ID!
    products : [ProductOrder]!
    customer: Customer
}

input OrderInput {
    products : [ProductOrderInput]!
    customer: CustomerInput
}

type Product {
    id: ID!
    name: String!
    description: String
}

input ProductInput {
    id: ID!
}

type ProductOrder {
    product(id: String): Product!
    quantity: Int!
}

input ProductOrderInput {
    product: ProductInput!
    quantity: Int!
}

type Customer {
    id: ID!
    firstName: String!
    surName: String
}

input CustomerInput {
    id: ID!
}

# The Root Query for the application
# Only one definition of this type is allowed per schema.
type Query {
    orders: [Order]!
    order(id: ID!): Order
    products: [Product]!
    product(id: ID!): Product
    customers: [Customer]!
    customer(id: ID!) : Customer
}

type Mutation {
    createOrder(order: OrderInput!) : Order!
    createCustomer(firstName: String!, surName: String) : Customer!
    createProduct(name: String!, description: String) : Product!
    deleteProduct(id: String!) : Product!
    deleteCustomer(id: String!) : Customer!
    deleteOrder(id: String!) : Order!
    updateProduct(id: String!, name: String!) : Product!
    updateCustomer(id: String!, firstName: String!, surName: String) : Customer
}
